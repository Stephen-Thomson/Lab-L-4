/// <reference types="node" />
/**
 * Helper function.
 *
 * Verifies the value of b is a Buffer and optionally also its length.
 */
export declare function verifyBuffer(b: Buffer | undefined | null, length?: number): Buffer;
/**
 * true iff both b1 and b2 are undefined or null, or both are Buffers and are equal.
 */
export declare function verifyBufferEquals(b1: Buffer | undefined | null, b2: Buffer | undefined | null): boolean;
/**
 * Helper function.
 *
 * Verifies that a possibly optional value has a value.
 */
export declare function verifyTruthy<T>(v: T | null | undefined, description?: string): T;
/**
 * Helper function.
 *
 * Verifies that an optional or null number has a numeric value.
 */
export declare function verifyNumber(v: number | null | undefined): number;
/**
 * Helper function.
 *
 * Verifies that an optional numeric Id has a value.
 */
export declare function verifyId(id: number | undefined | null): number;
/**
 * Helper function.
 *
 * throws ERR_BAD_REQUEST if results has length greater than one.
 *
 * @returns results[0] or undefined if length is zero.
 */
export declare function verifyOneOrNone<T>(results: T[]): (T | undefined);
/**
 * Helper function.
 *
 * throws ERR_BAD_REQUEST if results has length other than one.
 *
 * @returns results[0].
 */
export declare function verifyOne<T>(results: T[], errorDescrition?: string): T;
/**
 * Helper function.
 *
 * throws ERR_BAD_REQUEST if results has length greater than one.
 *
 * @returns results[0] or undefined if length is zero.
 */
export declare function verifyNone<T>(results: T[]): void;
//# sourceMappingURL=verifyHelpers.d.ts.map