/// <reference types="node" />
import { Chain } from './Api/CwiBaseApi';
import { BaseBlockHeader, BlockHeaderHex } from './Api/BlockHeaderApi';
/**
 * Computes double sha256 hash of bitcoin block header
 * bytes are reversed to bigendian order
 *
 * If header is a Buffer, it is required to 80 bytes long
 * and in standard block header serialized encoding.
 *
 * @returns doule sha256 hash of header bytes reversed
 * @publicbody
 */
export declare function blockHash(header: BaseBlockHeader | Buffer): Buffer;
/**
 * Serializes a block header as an 80 byte Buffer.
 * The exact serialized format is defined in the Bitcoin White Paper
 * such that computing a double sha256 hash of the buffer computes
 * the block hash for the header.
 * @returns 80 byte Buffer
 * @publicbody
 */
export declare function serializeBlockHeader(header: BaseBlockHeader, buffer?: Buffer, offset?: number): Buffer;
/**
 * Deserialize a block header from an 80 byte buffer
 * @publicbody
 */
export declare function deserializeBlockHeader(buffer: Buffer, offset?: number): BaseBlockHeader;
/**
 * Returns the genesis block for the specified chain.
 * @publicbody
 */
export declare function genesisHeaderHex(chain: Chain): BlockHeaderHex;
/**
 * Returns the genesis block for the specified chain.
 * @publicbody
 */
export declare function genesisBuffer(chain: Chain): Buffer;
//# sourceMappingURL=blockHeaderUtils.d.ts.map