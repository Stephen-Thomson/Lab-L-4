import { EnvelopeApi } from '@babbage/sdk-ts';
import { CwiError } from './CwiError';
/**
 * Not implemented.
 */
export declare class ERR_NOT_IMPLEMENTED extends CwiError {
    constructor();
}
/**
 * An internal server error has occurred.
 */
export declare class ERR_INTERNAL extends CwiError {
    constructor(description?: string);
}
/**
 * Access is denied due to an authorization error.
 */
export declare class ERR_UNAUTHORIZED extends CwiError {
    constructor(description?: string);
}
/**
 * The ${name} parameter is invalid.
 */
export declare class ERR_INVALID_PARAMETER extends CwiError {
    constructor(name: string, mustBe?: string);
}
/**
 * The ${name} parameter is missing, but it must be ${mustBe}.
 */
export declare class ERR_MISSING_PARAMETER extends CwiError {
    constructor(name: string, mustBe: string);
}
/**
 * The request is invalid.
 */
export declare class ERR_BAD_REQUEST extends CwiError {
    constructor(description?: string);
}
/**
 * Configured chain is invalid or does not match across services.
 */
export declare class ERR_CHAIN extends CwiError {
    constructor(description?: string);
}
/**
 * The current chain tip is not in sync with external sources.
 */
export declare class ERR_CHAIN_INVALID extends CwiError {
    constructor();
}
/**
 * TXIDs must be 32 bytes encoded as 64 hex digits.
 */
export declare class ERR_TXID_INVALID extends CwiError {
    constructor();
}
/**
 * TXID failed to correspond to a known transaction.
 */
export declare class ERR_TXID_UNKNOWN extends CwiError {
    constructor(description?: string);
}
/**
 * Transaction is a double spend.
 *
 * This exception includes `spendingTransactions`, an array of transaction envelopes
 * of conflicting transactions.
 */
export declare class ERR_DOUBLE_SPEND extends CwiError {
    spendingTransactions: EnvelopeApi[];
    constructor(spendingTransactions: EnvelopeApi[], description?: string);
}
//# sourceMappingURL=ERR_errors.d.ts.map