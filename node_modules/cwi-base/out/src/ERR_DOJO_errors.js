"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ERR_DOJO_PROVEN_TX = exports.ERR_DOJO_COMPLETED_TX = exports.ERR_DOJO_BROADCAST_FAILED = exports.ERR_DOJO_VALIDATION = exports.ERR_DOJO_FOREIGN_KEY = exports.ERR_DOJO_SYNC_MERGE = exports.ERR_DOJO_SYNC_TOTAL = exports.ERR_DOJO_SYNC_STATE = exports.ERR_DOJO_SYNC_REFNUM = exports.ERR_DOJO_SYNC_STATUS = exports.ERR_DOJO_PROCESS_PENDING_OUTGOING = exports.ERR_DOJO_NO_ENVELOPE = exports.ERR_DOJO_TRANSACTION_REJECTED = exports.ERR_DOJO_TRANSACTION_NOT_FOUND = exports.ERR_DOJO_SENDER_SIGNATURE_CHECK = exports.ERR_DOJO_REQUEST_EXPIRED = exports.ERR_DOJO_PAYMAIL_UNAVAILABLE = exports.ERR_DOJO_PAYMAIL_NOT_FOUND = exports.ERR_DOJO_PAYMAIL_NOT_FORMATTED_CORRECTLY = exports.ERR_DOJO_PAYMAIL_MISMATCH = exports.ERR_DOJO_LABEL_NOT_FOUND = exports.ERR_DOJO_INVALID_TXID = exports.ERR_DOJO_INVALID_OUTPUT_TAG = exports.ERR_DOJO_INVALID_TX_LABEL = exports.ERR_DOJO_INVALID_TX_RECIPIENT = exports.ERR_DOJO_INVALID_BEEF = exports.ERR_DOJO_INVALID_BASKET_NAME = exports.ERR_DOJO_INVALID_TRANSACTION_STATUS = exports.ERR_DOJO_INVALID_TIME = exports.ERR_DOJO_INVALID_SCRIPT = exports.ERR_DOJO_INVALID_SATOSHIS = exports.ERR_DOJO_INVALID_REFERENCE = exports.ERR_DOJO_INVALID_NOTE = exports.ERR_DOJO_INVALID_PAYMAIL_DOMAIN = exports.ERR_DOJO_INVALID_PAYMAIL_HANDLE = exports.ERR_DOJO_INVALID_OUTPUT_DESCRIPTION = exports.ERR_DOJO_INVALID_OUTPOINT = exports.ERR_DOJO_INVALID_CUSTOM_INSTRUCTIONS = exports.ERR_DOJO_INVALID_REDEEM = exports.ERR_DOJO_NOSENDCHANGE = exports.ERR_DOJO_CREATE_TX_EMPTY = exports.ERR_DOJO_CERT_SUBJECT = exports.ERR_DOJO_CERT_INVALID = exports.ERR_DOJO_CERT_DUPE = exports.ERR_DOJO_BROADCAST_DUPE = exports.ERR_DOJO_UNKNOWN_FEE_MODEL = exports.ERR_DOJO_NOT_SUFFICIENT_PROVEN_FUNDS = exports.ERR_DOJO_NOT_SUFFICIENT_ACCEPTED_FUNDS = exports.ERR_DOJO_NOT_SUFFICIENT_FUNDS = exports.ERR_DOJO_TX_BAD_AMOUNT = void 0;
const CwiError_1 = require("./CwiError");
const utils_1 = require("./utils");
/**
 * Transaction amount is not correct!
 */
class ERR_DOJO_TX_BAD_AMOUNT extends CwiError_1.CwiError {
    constructor(description) { super('ERR_DOJO_TX_BAD_AMOUNT', description !== null && description !== void 0 ? description : 'Transaction amount is not correct!'); }
}
exports.ERR_DOJO_TX_BAD_AMOUNT = ERR_DOJO_TX_BAD_AMOUNT;
/**
 * Not sufficient funds in the available inputs to cover the cost of the required outputs
 * and the transaction fee (${moreSatoshisNeeded} more satoshis are needed,
 * for a total of ${totalSatoshisNeeded}), plus whatever would be required in order
 * to pay the fee to unlock and spend the outputs used to provide the additional satoshis.
 */
class ERR_DOJO_NOT_SUFFICIENT_FUNDS extends CwiError_1.CwiError {
    constructor(totalSatoshisNeeded, moreSatoshisNeeded) {
        super('ERR_DOJO_NOT_SUFFICIENT_FUNDS', `Not sufficient funds in the available inputs to cover the cost of the required outputs and the transaction fee (${moreSatoshisNeeded} more satoshis are needed, for a total of ${totalSatoshisNeeded}), plus whatever would be required in order to pay the fee to unlock and spend the outputs used to provide the additional satoshis.`);
        this.totalSatoshisNeeded = totalSatoshisNeeded;
        this.moreSatoshisNeeded = moreSatoshisNeeded;
    }
}
exports.ERR_DOJO_NOT_SUFFICIENT_FUNDS = ERR_DOJO_NOT_SUFFICIENT_FUNDS;
/**
 * Not sufficient funds in the available inputs to cover the cost of the required outputs
 * and the transaction fee (${moreSatoshisNeeded} more satoshis are needed,
 * for a total of ${totalSatoshisNeeded}), plus whatever would be required in order
 * to pay the fee to unlock and spend the outputs used to provide the additional satoshis.
 *
 * Accepted funds require at least one transaction processor has accepted broacast of transaction containing each UTXO.
 */
class ERR_DOJO_NOT_SUFFICIENT_ACCEPTED_FUNDS extends CwiError_1.CwiError {
    constructor(totalSatoshisNeeded, moreSatoshisNeeded) {
        super('ERR_DOJO_NOT_SUFFICIENT_PROVEN_FUNDS', `Not sufficient funds in the available inputs to cover the cost of the required outputs and the transaction fee (${moreSatoshisNeeded} more satoshis are needed, for a total of ${totalSatoshisNeeded}), plus whatever would be required in order to pay the fee to unlock and spend the outputs used to provide the additional satoshis.`);
        this.totalSatoshisNeeded = totalSatoshisNeeded;
        this.moreSatoshisNeeded = moreSatoshisNeeded;
    }
}
exports.ERR_DOJO_NOT_SUFFICIENT_ACCEPTED_FUNDS = ERR_DOJO_NOT_SUFFICIENT_ACCEPTED_FUNDS;
/**
 * Not sufficient funds in the available inputs to cover the cost of the required outputs
 * and the transaction fee (${moreSatoshisNeeded} more satoshis are needed,
 * for a total of ${totalSatoshisNeeded}), plus whatever would be required in order
 * to pay the fee to unlock and spend the outputs used to provide the additional satoshis.
 *
 * Proven funds require valid merkle proofs for each UTXO.
 */
class ERR_DOJO_NOT_SUFFICIENT_PROVEN_FUNDS extends CwiError_1.CwiError {
    constructor(totalSatoshisNeeded, moreSatoshisNeeded) {
        super('ERR_DOJO_NOT_SUFFICIENT_PROVEN_FUNDS', `Not sufficient funds in the available inputs to cover the cost of the required outputs and the transaction fee (${moreSatoshisNeeded} more satoshis are needed, for a total of ${totalSatoshisNeeded}), plus whatever would be required in order to pay the fee to unlock and spend the outputs used to provide the additional satoshis.`);
        this.totalSatoshisNeeded = totalSatoshisNeeded;
        this.moreSatoshisNeeded = moreSatoshisNeeded;
    }
}
exports.ERR_DOJO_NOT_SUFFICIENT_PROVEN_FUNDS = ERR_DOJO_NOT_SUFFICIENT_PROVEN_FUNDS;
/**
 * Transaction was already broadcast.
 */
class ERR_DOJO_UNKNOWN_FEE_MODEL extends CwiError_1.CwiError {
    constructor(model) { super('ERR_DOJO_UNKNOWN_FEE_MODEL', `"${model}" is not a supported fee model. Only "sat/kb" is a supported at this time. Please email dojo-fee-models@babbage.systems if you have a new fee model which you would like Dojo to support.`); }
}
exports.ERR_DOJO_UNKNOWN_FEE_MODEL = ERR_DOJO_UNKNOWN_FEE_MODEL;
/**
 * Transaction was already broadcast.
 */
class ERR_DOJO_BROADCAST_DUPE extends CwiError_1.CwiError {
    constructor() { super('ERR_DOJO_BROADCAST_DUPE', 'Transaction was already broadcast.'); }
}
exports.ERR_DOJO_BROADCAST_DUPE = ERR_DOJO_BROADCAST_DUPE;
/**
 * Certificate already exists.
 */
class ERR_DOJO_CERT_DUPE extends CwiError_1.CwiError {
    constructor() { super('ERR_DOJO_CERT_DUPE', 'Certificate already exists.'); }
}
exports.ERR_DOJO_CERT_DUPE = ERR_DOJO_CERT_DUPE;
/**
 * Certificate signature is invalid.
 */
class ERR_DOJO_CERT_INVALID extends CwiError_1.CwiError {
    constructor() { super('ERR_DOJO_CERT_INVALID', 'Certificate signature is invalid.'); }
}
exports.ERR_DOJO_CERT_INVALID = ERR_DOJO_CERT_INVALID;
/**
 * Certificate subject must match authenticated user's identityKey.
 */
class ERR_DOJO_CERT_SUBJECT extends CwiError_1.CwiError {
    constructor() { super('ERR_DOJO_CERT_SUBJECT', "Certificate subject must match authenticated user's identityKey."); }
}
exports.ERR_DOJO_CERT_SUBJECT = ERR_DOJO_CERT_SUBJECT;
/**
 * Transaction must have at least one input and output.
 */
class ERR_DOJO_CREATE_TX_EMPTY extends CwiError_1.CwiError {
    constructor() { super('ERR_DOJO_CREATE_TX_EMPTY', 'Transaction must have at least one input and output.'); }
}
exports.ERR_DOJO_CREATE_TX_EMPTY = ERR_DOJO_CREATE_TX_EMPTY;
/**
 * outputToRedeem is invalid
 */
class ERR_DOJO_NOSENDCHANGE extends CwiError_1.CwiError {
    constructor(description) { super('ERR_DOJO_NOSENDCHANGE', typeof description === 'string' ? description : `Invalid noSendChange outpoint ${description}`); }
}
exports.ERR_DOJO_NOSENDCHANGE = ERR_DOJO_NOSENDCHANGE;
/**
 * outputToRedeem is invalid
 */
class ERR_DOJO_INVALID_REDEEM extends CwiError_1.CwiError {
    constructor(description) { super('ERR_DOJO_INVALID_REDEEM', description !== null && description !== void 0 ? description : 'outputToRedeem is invalid'); }
}
exports.ERR_DOJO_INVALID_REDEEM = ERR_DOJO_INVALID_REDEEM;
/**
 * Output customInstruction must be a string or length not more than 2500.
 */
class ERR_DOJO_INVALID_CUSTOM_INSTRUCTIONS extends CwiError_1.CwiError {
    constructor() { super('ERR_DOJO_INVALID_CUSTOM_INSTRUCTIONS', 'Output customInstruction must be a string or length not more than 2500.'); }
}
exports.ERR_DOJO_INVALID_CUSTOM_INSTRUCTIONS = ERR_DOJO_INVALID_CUSTOM_INSTRUCTIONS;
/**
 * The outpoint (txid and vout combination) does not belong to a transaction known by this user of the server.
 */
class ERR_DOJO_INVALID_OUTPOINT extends CwiError_1.CwiError {
    constructor() { super('ERR_DOJO_INVALID_OUTPOINT', 'The outpoint (txid and vout combination) does not belong to a transaction known by this user of the server.'); }
}
exports.ERR_DOJO_INVALID_OUTPOINT = ERR_DOJO_INVALID_OUTPOINT;
/**
 * Output description must be a string or length not more than 255.
 */
class ERR_DOJO_INVALID_OUTPUT_DESCRIPTION extends CwiError_1.CwiError {
    constructor() { super('ERR_DOJO_INVALID_OUTPUT_DESCRIPTION', 'Output description must be a string or length not more than 255.'); }
}
exports.ERR_DOJO_INVALID_OUTPUT_DESCRIPTION = ERR_DOJO_INVALID_OUTPUT_DESCRIPTION;
/**
 * The paymail handle is invalid.
 */
class ERR_DOJO_INVALID_PAYMAIL_HANDLE extends CwiError_1.CwiError {
    constructor(description) { super('ERR_DOJO_INVALID_PAYMAIL_HANDLE', description !== null && description !== void 0 ? description : 'The paymail handle is invalid'); }
}
exports.ERR_DOJO_INVALID_PAYMAIL_HANDLE = ERR_DOJO_INVALID_PAYMAIL_HANDLE;
/**
 * This server is not accepting registrations for new Paymail handles under the specified domain name.
 */
class ERR_DOJO_INVALID_PAYMAIL_DOMAIN extends CwiError_1.CwiError {
    constructor() { super('ERR_DOJO_INVALID_PAYMAIL_DOMAIN', 'This server is not accepting registrations for new Paymail handles under the specified domain name.'); }
}
exports.ERR_DOJO_INVALID_PAYMAIL_DOMAIN = ERR_DOJO_INVALID_PAYMAIL_DOMAIN;
/**
 * The transaction note is invalid.
 */
class ERR_DOJO_INVALID_NOTE extends CwiError_1.CwiError {
    constructor() { super('ERR_DOJO_INVALID_NOTE', 'The transaction note is invalid. Length limit is 500.'); }
}
exports.ERR_DOJO_INVALID_NOTE = ERR_DOJO_INVALID_NOTE;
/**
 * The transaction reference is invalid.
 */
class ERR_DOJO_INVALID_REFERENCE extends CwiError_1.CwiError {
    constructor(reference) { super('ERR_DOJO_INVALID_REFERENCE', `The transaction reference (${reference !== null && reference !== void 0 ? reference : ''}) is invalid.`); }
}
exports.ERR_DOJO_INVALID_REFERENCE = ERR_DOJO_INVALID_REFERENCE;
/**
 * An amount of satoshis must be a non-negative integer less than 21e14.
 */
class ERR_DOJO_INVALID_SATOSHIS extends CwiError_1.CwiError {
    constructor() { super('ERR_DOJO_INVALID_SATOSHIS', 'An amount of satoshis must be a non-negative integer less than 21e14.'); }
}
exports.ERR_DOJO_INVALID_SATOSHIS = ERR_DOJO_INVALID_SATOSHIS;
/**
 * Script must be a valid Bitcoin script.
 */
class ERR_DOJO_INVALID_SCRIPT extends CwiError_1.CwiError {
    constructor(description) { super('ERR_DOJO_INVALID_SCRIPT', description !== null && description !== void 0 ? description : 'Script must be a valid Bitcoin script.'); }
}
exports.ERR_DOJO_INVALID_SCRIPT = ERR_DOJO_INVALID_SCRIPT;
/**
 * Time values must be integer number of seconds since the epoch.
 */
class ERR_DOJO_INVALID_TIME extends CwiError_1.CwiError {
    constructor() { super('ERR_DOJO_INVALID_TIME', 'Time values must be integer number of seconds since the epoch.'); }
}
exports.ERR_DOJO_INVALID_TIME = ERR_DOJO_INVALID_TIME;
/**
 * The status of this transaction is ${stat}, which is not compatible with this operation. The transaction was not broadcasted by the recipient.
 */
class ERR_DOJO_INVALID_TRANSACTION_STATUS extends CwiError_1.CwiError {
    constructor(stat) { super('ERR_DOJO_INVALID_TRANSACTION_STATUS', `The status of this transaction is ${stat}, which is not compatible with this operation. The transaction was not broadcasted by the recipient.`); }
}
exports.ERR_DOJO_INVALID_TRANSACTION_STATUS = ERR_DOJO_INVALID_TRANSACTION_STATUS;
/**
 * Basket names must have one visible character and not more than 1000.
 */
class ERR_DOJO_INVALID_BASKET_NAME extends CwiError_1.CwiError {
    constructor() { super('ERR_DOJO_INVALID_BASKET_NAME', 'Basket names must have one visible character and not more than 1000.'); }
}
exports.ERR_DOJO_INVALID_BASKET_NAME = ERR_DOJO_INVALID_BASKET_NAME;
/**
 * Basket names must have one visible character and not more than 1000.
 */
class ERR_DOJO_INVALID_BEEF extends CwiError_1.CwiError {
    constructor(description) { super('ERR_DOJO_INVALID_BEEF', description || `Invalid BEEF.`); }
}
exports.ERR_DOJO_INVALID_BEEF = ERR_DOJO_INVALID_BEEF;
/**
 * Transaction recipient must be not more than 100.
 */
class ERR_DOJO_INVALID_TX_RECIPIENT extends CwiError_1.CwiError {
    constructor() { super('ERR_DOJO_INVALID_TX_RECIPIENT', 'Transaction recipient must be not more than 100.'); }
}
exports.ERR_DOJO_INVALID_TX_RECIPIENT = ERR_DOJO_INVALID_TX_RECIPIENT;
/**
 * Transaction labels must have one visible character and not more than 150.
 */
class ERR_DOJO_INVALID_TX_LABEL extends CwiError_1.CwiError {
    constructor() { super('ERR_DOJO_INVALID_TX_LABEL', 'Transaction labels must have one visible character and not more than 150.'); }
}
exports.ERR_DOJO_INVALID_TX_LABEL = ERR_DOJO_INVALID_TX_LABEL;
/**
 * Output tags must have one visible character and not more than 150.
 */
class ERR_DOJO_INVALID_OUTPUT_TAG extends CwiError_1.CwiError {
    constructor() { super('ERR_DOJO_INVALID_OUTPUT_TAG', 'Output tags must have one visible character and not more than 150.'); }
}
exports.ERR_DOJO_INVALID_OUTPUT_TAG = ERR_DOJO_INVALID_OUTPUT_TAG;
/**
 * Transaction labels must have one visible character and not more than 150.
 */
class ERR_DOJO_INVALID_TXID extends CwiError_1.CwiError {
    constructor(txid) { super('ERR_DOJO_INVALID_TXID', `Transaction associated with ${txid} is invalid.`); }
}
exports.ERR_DOJO_INVALID_TXID = ERR_DOJO_INVALID_TXID;
/**
 * The label cannot be found linked with your user account.
 */
class ERR_DOJO_LABEL_NOT_FOUND extends CwiError_1.CwiError {
    constructor() { super('ERR_DOJO_LABEL_NOT_FOUND', 'The label cannot be found linked with your user account.'); }
}
exports.ERR_DOJO_LABEL_NOT_FOUND = ERR_DOJO_LABEL_NOT_FOUND;
/**
 * This paymail is not the same one used to create the request. The transaction was not broadcasted by the recipient.
 */
class ERR_DOJO_PAYMAIL_MISMATCH extends CwiError_1.CwiError {
    constructor() { super('ERR_DOJO_PAYMAIL_MISMATCH', 'This paymail is not the same one used to create the request. The transaction was not broadcasted by the recipient.'); }
}
exports.ERR_DOJO_PAYMAIL_MISMATCH = ERR_DOJO_PAYMAIL_MISMATCH;
/**
 * The provided paymail was not in the correct format.
 */
class ERR_DOJO_PAYMAIL_NOT_FORMATTED_CORRECTLY extends CwiError_1.CwiError {
    constructor() { super('ERR_DOJO_PAYMAIL_NOT_FORMATTED_CORRECTLY', 'The provided paymail was not in the correct format.'); }
}
exports.ERR_DOJO_PAYMAIL_NOT_FORMATTED_CORRECTLY = ERR_DOJO_PAYMAIL_NOT_FORMATTED_CORRECTLY;
/**
 * This paymail was not found on this server.
 */
class ERR_DOJO_PAYMAIL_NOT_FOUND extends CwiError_1.CwiError {
    constructor() { super('ERR_DOJO_PAYMAIL_NOT_FOUND', 'This paymail was not found on this server.'); }
}
exports.ERR_DOJO_PAYMAIL_NOT_FOUND = ERR_DOJO_PAYMAIL_NOT_FOUND;
/**
 * This Paymail handle is unavailable for registration by this server.
 */
class ERR_DOJO_PAYMAIL_UNAVAILABLE extends CwiError_1.CwiError {
    constructor() { super('ERR_DOJO_PAYMAIL_UNAVAILABLE', 'This Paymail handle is unavailable for registration by this server.'); }
}
exports.ERR_DOJO_PAYMAIL_UNAVAILABLE = ERR_DOJO_PAYMAIL_UNAVAILABLE;
/**
 * The reference you have provided is expired. The transaction was not broadcasted by the recipient.
 */
class ERR_DOJO_REQUEST_EXPIRED extends CwiError_1.CwiError {
    constructor() { super('ERR_DOJO_REQUEST_EXPIRED', 'The reference you have provided is expired. The transaction was not broadcasted by the recipient.'); }
}
exports.ERR_DOJO_REQUEST_EXPIRED = ERR_DOJO_REQUEST_EXPIRED;
/**
 * The signature you provided to authenticate this Paymail sender is not valid.
 */
class ERR_DOJO_SENDER_SIGNATURE_CHECK extends CwiError_1.CwiError {
    constructor() { super('ERR_DOJO_SENDER_SIGNATURE_CHECK', 'The signature you provided to authenticate this Paymail sender is not valid.'); }
}
exports.ERR_DOJO_SENDER_SIGNATURE_CHECK = ERR_DOJO_SENDER_SIGNATURE_CHECK;
/**
 * The transaction cannot be found linked with your user account.
 */
class ERR_DOJO_TRANSACTION_NOT_FOUND extends CwiError_1.CwiError {
    constructor() { super('ERR_DOJO_TRANSACTION_NOT_FOUND', 'The transaction cannot be found linked with your user account.'); }
}
exports.ERR_DOJO_TRANSACTION_NOT_FOUND = ERR_DOJO_TRANSACTION_NOT_FOUND;
/**
 * This transaction was rejected and was not broadcasted by the recipient. Ensure that all specified output scripts are present with the correct amounts assigned to each.
 */
class ERR_DOJO_TRANSACTION_REJECTED extends CwiError_1.CwiError {
    constructor(description) { super('ERR_DOJO_TRANSACTION_REJECTED', description !== null && description !== void 0 ? description : 'This transaction was rejected and was not broadcasted by the recipient. Ensure that all specified output scripts are present with the correct amounts assigned to each.'); }
}
exports.ERR_DOJO_TRANSACTION_REJECTED = ERR_DOJO_TRANSACTION_REJECTED;
/**
 * No envelope for ${txid}
 */
class ERR_DOJO_NO_ENVELOPE extends CwiError_1.CwiError {
    constructor(txid) { super('ERR_DOJO_NO_ENVELOPE', `No envelope for ${txid}`); }
}
exports.ERR_DOJO_NO_ENVELOPE = ERR_DOJO_NO_ENVELOPE;
/**
 * processPendingOuputs of outgoing transactions is not suported at this time.
 */
class ERR_DOJO_PROCESS_PENDING_OUTGOING extends CwiError_1.CwiError {
    constructor() { super('ERR_DOJO_PROCESS_PENDING_OUTGOING', 'processPendingOuputs of outgoing transactions is not suported at this time.'); }
}
exports.ERR_DOJO_PROCESS_PENDING_OUTGOING = ERR_DOJO_PROCESS_PENDING_OUTGOING;
/**
 * dojo sync ${step} status expected '${expected}' but received '${actual}'
 */
class ERR_DOJO_SYNC_STATUS extends CwiError_1.CwiError {
    constructor(step, expected, actual) { super('ERR_DOJO_SYNC_STATUS', `dojo sync ${step} status expected '${expected}' but received '${actual}'`); }
}
exports.ERR_DOJO_SYNC_STATUS = ERR_DOJO_SYNC_STATUS;
/**
* refNum '${expected}' expected, '${actual}' received
*/
class ERR_DOJO_SYNC_REFNUM extends CwiError_1.CwiError {
    constructor(expected, actual) { super('ERR_DOJO_SYNC_REFNUM', `refNum '${expected}' expected, '${actual}' received`); }
}
exports.ERR_DOJO_SYNC_REFNUM = ERR_DOJO_SYNC_REFNUM;
/**
* missing valid update state from syncDojo
*/
class ERR_DOJO_SYNC_STATE extends CwiError_1.CwiError {
    constructor() { super('ERR_DOJO_SYNC_STATE', 'missing valid update state from syncDojo'); }
}
exports.ERR_DOJO_SYNC_STATE = ERR_DOJO_SYNC_STATE;
/**
* sync total '${expected ?? 0}' expected, '${actual ?? 0}' received
*/
class ERR_DOJO_SYNC_TOTAL extends CwiError_1.CwiError {
    constructor(expected, actual) { super('ERR_DOJO_SYNC_TOTAL', `sync total '${expected !== null && expected !== void 0 ? expected : 0}' expected, '${actual !== null && actual !== void 0 ? actual : 0}' received`); }
}
exports.ERR_DOJO_SYNC_TOTAL = ERR_DOJO_SYNC_TOTAL;
/**
* description || 'Dojo sync merge error.'
*/
class ERR_DOJO_SYNC_MERGE extends CwiError_1.CwiError {
    constructor(description) { super('ERR_DOJO_SYNC_MERGE', description || 'Dojo sync merge error.'); }
}
exports.ERR_DOJO_SYNC_MERGE = ERR_DOJO_SYNC_MERGE;
/**
* description || 'Dojo foreign key validation error.'
*/
class ERR_DOJO_FOREIGN_KEY extends CwiError_1.CwiError {
    constructor(description) { super('ERR_DOJO_FOREIGN_KEY', description || `Dojo foreign key validation error.`); }
}
exports.ERR_DOJO_FOREIGN_KEY = ERR_DOJO_FOREIGN_KEY;
/**
* description || 'Dojo validation error.'
*/
class ERR_DOJO_VALIDATION extends CwiError_1.CwiError {
    constructor(description) { super('ERR_DOJO_VALIDATION', description || `Dojo validation error.`); }
}
exports.ERR_DOJO_VALIDATION = ERR_DOJO_VALIDATION;
/**
* description || 'Dojo transaction broadcast failed.'
*/
class ERR_DOJO_BROADCAST_FAILED extends CwiError_1.CwiError {
    constructor(description) { super('ERR_DOJO_BROADCAST_FAILED', description || `Dojo transaction broadcast failed.`); }
}
exports.ERR_DOJO_BROADCAST_FAILED = ERR_DOJO_BROADCAST_FAILED;
/**
* `Update is invalid on completed transaction txid=${asString(txid)}`
*/
class ERR_DOJO_COMPLETED_TX extends CwiError_1.CwiError {
    constructor(txid) { super('ERR_DOJO_COMPLETED_TX', `Update is invalid on completed transaction txid=${(0, utils_1.asString)(txid)}`); }
}
exports.ERR_DOJO_COMPLETED_TX = ERR_DOJO_COMPLETED_TX;
/**
* `Update is invalid on proven transaction txid=${asString(txid)}`
*/
class ERR_DOJO_PROVEN_TX extends CwiError_1.CwiError {
    constructor(txid) { super('ERR_DOJO_PROVEN_TX', `Update is invalid on proven transaction txid=${(0, utils_1.asString)(txid)}`); }
}
exports.ERR_DOJO_PROVEN_TX = ERR_DOJO_PROVEN_TX;
//# sourceMappingURL=ERR_DOJO_errors.js.map