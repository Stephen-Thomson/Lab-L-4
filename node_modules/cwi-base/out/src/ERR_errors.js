"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ERR_DOUBLE_SPEND = exports.ERR_TXID_UNKNOWN = exports.ERR_TXID_INVALID = exports.ERR_CHAIN_INVALID = exports.ERR_CHAIN = exports.ERR_BAD_REQUEST = exports.ERR_MISSING_PARAMETER = exports.ERR_INVALID_PARAMETER = exports.ERR_UNAUTHORIZED = exports.ERR_INTERNAL = exports.ERR_NOT_IMPLEMENTED = void 0;
const CwiError_1 = require("./CwiError");
/**
 * Not implemented.
 */
class ERR_NOT_IMPLEMENTED extends CwiError_1.CwiError {
    constructor() { super('ERR_NOT_IMPLEMENTED', 'Not implemented.'); }
}
exports.ERR_NOT_IMPLEMENTED = ERR_NOT_IMPLEMENTED;
/**
 * An internal server error has occurred.
 */
class ERR_INTERNAL extends CwiError_1.CwiError {
    constructor(description) { super('ERR_INTERNAL', description !== null && description !== void 0 ? description : 'An internal server error has occurred.'); }
}
exports.ERR_INTERNAL = ERR_INTERNAL;
/**
 * Access is denied due to an authorization error.
 */
class ERR_UNAUTHORIZED extends CwiError_1.CwiError {
    constructor(description) { super('ERR_UNAUTHORIZED', description !== null && description !== void 0 ? description : 'Access is denied due to an authorization error.'); }
}
exports.ERR_UNAUTHORIZED = ERR_UNAUTHORIZED;
/**
 * The ${name} parameter is invalid.
 */
class ERR_INVALID_PARAMETER extends CwiError_1.CwiError {
    constructor(name, mustBe) { super('ERR_INVALID_PARAMETER', `The ${name} parameter must be ${mustBe !== null && mustBe !== void 0 ? mustBe : 'valid'}.`); }
}
exports.ERR_INVALID_PARAMETER = ERR_INVALID_PARAMETER;
/**
 * The ${name} parameter is missing, but it must be ${mustBe}.
 */
class ERR_MISSING_PARAMETER extends CwiError_1.CwiError {
    constructor(name, mustBe) { super('ERR_MISSING_PARAMETER', `The ${name} parameter is missing, but it must be ${mustBe}.`); }
}
exports.ERR_MISSING_PARAMETER = ERR_MISSING_PARAMETER;
/**
 * The request is invalid.
 */
class ERR_BAD_REQUEST extends CwiError_1.CwiError {
    constructor(description) { super('ERR_BAD_REQUEST', description !== null && description !== void 0 ? description : 'The request is invalid.'); }
}
exports.ERR_BAD_REQUEST = ERR_BAD_REQUEST;
/**
 * Configured chain is invalid or does not match across services.
 */
class ERR_CHAIN extends CwiError_1.CwiError {
    constructor(description) { super('ERR_CHAIN', description !== null && description !== void 0 ? description : 'Configured chain is invalid or does not match across services.'); }
}
exports.ERR_CHAIN = ERR_CHAIN;
/**
 * The current chain tip is not in sync with external sources.
 */
class ERR_CHAIN_INVALID extends CwiError_1.CwiError {
    constructor() { super('ERR_CHAIN_INVALID', 'The current chain tip is not in sync with external sources.'); }
}
exports.ERR_CHAIN_INVALID = ERR_CHAIN_INVALID;
/**
 * TXIDs must be 32 bytes encoded as 64 hex digits.
 */
class ERR_TXID_INVALID extends CwiError_1.CwiError {
    constructor() { super('ERR_TXID_INVALID', 'TXIDs must be 32 bytes encoded as 64 hex digits.'); }
}
exports.ERR_TXID_INVALID = ERR_TXID_INVALID;
/**
 * TXID failed to correspond to a known transaction.
 */
class ERR_TXID_UNKNOWN extends CwiError_1.CwiError {
    constructor(description) { super('ERR_TXID_UNKNOWN', description !== null && description !== void 0 ? description : 'TXID failed to correspond to a known transaction.'); }
}
exports.ERR_TXID_UNKNOWN = ERR_TXID_UNKNOWN;
/**
 * Transaction is a double spend.
 *
 * This exception includes `spendingTransactions`, an array of transaction envelopes
 * of conflicting transactions.
 */
class ERR_DOUBLE_SPEND extends CwiError_1.CwiError {
    constructor(spendingTransactions, description) {
        super('ERR_DOUBLE_SPEND', description !== null && description !== void 0 ? description : 'Transaction is a double spend.');
        this.spendingTransactions = spendingTransactions;
    }
}
exports.ERR_DOUBLE_SPEND = ERR_DOUBLE_SPEND;
//# sourceMappingURL=ERR_errors.js.map