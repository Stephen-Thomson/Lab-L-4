"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.verifyNone = exports.verifyOne = exports.verifyOneOrNone = exports.verifyId = exports.verifyNumber = exports.verifyTruthy = exports.verifyBufferEquals = exports.verifyBuffer = void 0;
const ERR_errors_1 = require("./ERR_errors");
// Verify functions return a value of a desired type, potentially validating and coercing the
// input along the way.
//
// In contrast, Validate functions only confirm the validity of a value.
// If valid, the value is not altered in any way.
/**
 * Helper function.
 *
 * Verifies the value of b is a Buffer and optionally also its length.
 */
function verifyBuffer(b, length) {
    if ((b == null) || !Buffer.isBuffer(b))
        throw new ERR_errors_1.ERR_INTERNAL('Buffer required.');
    if (length !== undefined && b.length !== length)
        throw new ERR_errors_1.ERR_INTERNAL(`Buffer of ${length} bytes required.`);
    return b;
}
exports.verifyBuffer = verifyBuffer;
/**
 * true iff both b1 and b2 are undefined or null, or both are Buffers and are equal.
 */
function verifyBufferEquals(b1, b2) {
    if (b1 && b2)
        return b1.equals(b2);
    return !(b1 || b2);
}
exports.verifyBufferEquals = verifyBufferEquals;
/**
 * Helper function.
 *
 * Verifies that a possibly optional value has a value.
 */
function verifyTruthy(v, description) {
    if (v == null)
        throw new ERR_errors_1.ERR_INTERNAL(description !== null && description !== void 0 ? description : 'A truthy value is required.');
    return v;
}
exports.verifyTruthy = verifyTruthy;
/**
 * Helper function.
 *
 * Verifies that an optional or null number has a numeric value.
 */
function verifyNumber(v) {
    if (typeof v !== 'number')
        throw new ERR_errors_1.ERR_INTERNAL('A number is required.');
    return v;
}
exports.verifyNumber = verifyNumber;
/**
 * Helper function.
 *
 * Verifies that an optional numeric Id has a value.
 */
function verifyId(id) {
    if (id === undefined || typeof id !== 'number')
        throw new ERR_errors_1.ERR_INTERNAL('id was expected to be defined.');
    return id;
}
exports.verifyId = verifyId;
/**
 * Helper function.
 *
 * throws ERR_BAD_REQUEST if results has length greater than one.
 *
 * @returns results[0] or undefined if length is zero.
 */
function verifyOneOrNone(results) {
    if (results.length > 1)
        throw new ERR_errors_1.ERR_BAD_REQUEST('Result must be unique.');
    return results[0];
}
exports.verifyOneOrNone = verifyOneOrNone;
/**
 * Helper function.
 *
 * throws ERR_BAD_REQUEST if results has length other than one.
 *
 * @returns results[0].
 */
function verifyOne(results, errorDescrition) {
    if (results.length !== 1)
        throw new ERR_errors_1.ERR_BAD_REQUEST(errorDescrition !== null && errorDescrition !== void 0 ? errorDescrition : 'Result must exist and be unique.');
    return results[0];
}
exports.verifyOne = verifyOne;
/**
 * Helper function.
 *
 * throws ERR_BAD_REQUEST if results has length greater than one.
 *
 * @returns results[0] or undefined if length is zero.
 */
function verifyNone(results) {
    if (results.length > 0)
        throw new ERR_errors_1.ERR_BAD_REQUEST('Duplicate is not allowed.');
}
exports.verifyNone = verifyNone;
//# sourceMappingURL=verifyHelpers.js.map