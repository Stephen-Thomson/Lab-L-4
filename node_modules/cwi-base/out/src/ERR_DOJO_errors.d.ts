/// <reference types="node" />
import { OutPoint } from '@babbage/sdk-ts';
import { DojoSyncStatus } from './Api/DojoClientApi';
import { CwiError } from './CwiError';
/**
 * Transaction amount is not correct!
 */
export declare class ERR_DOJO_TX_BAD_AMOUNT extends CwiError {
    constructor(description?: string);
}
/**
 * Not sufficient funds in the available inputs to cover the cost of the required outputs
 * and the transaction fee (${moreSatoshisNeeded} more satoshis are needed,
 * for a total of ${totalSatoshisNeeded}), plus whatever would be required in order
 * to pay the fee to unlock and spend the outputs used to provide the additional satoshis.
 */
export declare class ERR_DOJO_NOT_SUFFICIENT_FUNDS extends CwiError {
    totalSatoshisNeeded: number;
    moreSatoshisNeeded: number;
    constructor(totalSatoshisNeeded: number, moreSatoshisNeeded: number);
}
/**
 * Not sufficient funds in the available inputs to cover the cost of the required outputs
 * and the transaction fee (${moreSatoshisNeeded} more satoshis are needed,
 * for a total of ${totalSatoshisNeeded}), plus whatever would be required in order
 * to pay the fee to unlock and spend the outputs used to provide the additional satoshis.
 *
 * Accepted funds require at least one transaction processor has accepted broacast of transaction containing each UTXO.
 */
export declare class ERR_DOJO_NOT_SUFFICIENT_ACCEPTED_FUNDS extends CwiError {
    totalSatoshisNeeded: number;
    moreSatoshisNeeded: number;
    constructor(totalSatoshisNeeded: number, moreSatoshisNeeded: number);
}
/**
 * Not sufficient funds in the available inputs to cover the cost of the required outputs
 * and the transaction fee (${moreSatoshisNeeded} more satoshis are needed,
 * for a total of ${totalSatoshisNeeded}), plus whatever would be required in order
 * to pay the fee to unlock and spend the outputs used to provide the additional satoshis.
 *
 * Proven funds require valid merkle proofs for each UTXO.
 */
export declare class ERR_DOJO_NOT_SUFFICIENT_PROVEN_FUNDS extends CwiError {
    totalSatoshisNeeded: number;
    moreSatoshisNeeded: number;
    constructor(totalSatoshisNeeded: number, moreSatoshisNeeded: number);
}
/**
 * Transaction was already broadcast.
 */
export declare class ERR_DOJO_UNKNOWN_FEE_MODEL extends CwiError {
    constructor(model: string);
}
/**
 * Transaction was already broadcast.
 */
export declare class ERR_DOJO_BROADCAST_DUPE extends CwiError {
    constructor();
}
/**
 * Certificate already exists.
 */
export declare class ERR_DOJO_CERT_DUPE extends CwiError {
    constructor();
}
/**
 * Certificate signature is invalid.
 */
export declare class ERR_DOJO_CERT_INVALID extends CwiError {
    constructor();
}
/**
 * Certificate subject must match authenticated user's identityKey.
 */
export declare class ERR_DOJO_CERT_SUBJECT extends CwiError {
    constructor();
}
/**
 * Transaction must have at least one input and output.
 */
export declare class ERR_DOJO_CREATE_TX_EMPTY extends CwiError {
    constructor();
}
/**
 * outputToRedeem is invalid
 */
export declare class ERR_DOJO_NOSENDCHANGE extends CwiError {
    constructor(description: string | OutPoint);
}
/**
 * outputToRedeem is invalid
 */
export declare class ERR_DOJO_INVALID_REDEEM extends CwiError {
    constructor(description?: string);
}
/**
 * Output customInstruction must be a string or length not more than 2500.
 */
export declare class ERR_DOJO_INVALID_CUSTOM_INSTRUCTIONS extends CwiError {
    constructor();
}
/**
 * The outpoint (txid and vout combination) does not belong to a transaction known by this user of the server.
 */
export declare class ERR_DOJO_INVALID_OUTPOINT extends CwiError {
    constructor();
}
/**
 * Output description must be a string or length not more than 255.
 */
export declare class ERR_DOJO_INVALID_OUTPUT_DESCRIPTION extends CwiError {
    constructor();
}
/**
 * The paymail handle is invalid.
 */
export declare class ERR_DOJO_INVALID_PAYMAIL_HANDLE extends CwiError {
    constructor(description?: string);
}
/**
 * This server is not accepting registrations for new Paymail handles under the specified domain name.
 */
export declare class ERR_DOJO_INVALID_PAYMAIL_DOMAIN extends CwiError {
    constructor();
}
/**
 * The transaction note is invalid.
 */
export declare class ERR_DOJO_INVALID_NOTE extends CwiError {
    constructor();
}
/**
 * The transaction reference is invalid.
 */
export declare class ERR_DOJO_INVALID_REFERENCE extends CwiError {
    constructor(reference?: string);
}
/**
 * An amount of satoshis must be a non-negative integer less than 21e14.
 */
export declare class ERR_DOJO_INVALID_SATOSHIS extends CwiError {
    constructor();
}
/**
 * Script must be a valid Bitcoin script.
 */
export declare class ERR_DOJO_INVALID_SCRIPT extends CwiError {
    constructor(description?: string);
}
/**
 * Time values must be integer number of seconds since the epoch.
 */
export declare class ERR_DOJO_INVALID_TIME extends CwiError {
    constructor();
}
/**
 * The status of this transaction is ${stat}, which is not compatible with this operation. The transaction was not broadcasted by the recipient.
 */
export declare class ERR_DOJO_INVALID_TRANSACTION_STATUS extends CwiError {
    constructor(stat: string);
}
/**
 * Basket names must have one visible character and not more than 1000.
 */
export declare class ERR_DOJO_INVALID_BASKET_NAME extends CwiError {
    constructor();
}
/**
 * Basket names must have one visible character and not more than 1000.
 */
export declare class ERR_DOJO_INVALID_BEEF extends CwiError {
    constructor(description?: string);
}
/**
 * Transaction recipient must be not more than 100.
 */
export declare class ERR_DOJO_INVALID_TX_RECIPIENT extends CwiError {
    constructor();
}
/**
 * Transaction labels must have one visible character and not more than 150.
 */
export declare class ERR_DOJO_INVALID_TX_LABEL extends CwiError {
    constructor();
}
/**
 * Output tags must have one visible character and not more than 150.
 */
export declare class ERR_DOJO_INVALID_OUTPUT_TAG extends CwiError {
    constructor();
}
/**
 * Transaction labels must have one visible character and not more than 150.
 */
export declare class ERR_DOJO_INVALID_TXID extends CwiError {
    constructor(txid: string);
}
/**
 * The label cannot be found linked with your user account.
 */
export declare class ERR_DOJO_LABEL_NOT_FOUND extends CwiError {
    constructor();
}
/**
 * This paymail is not the same one used to create the request. The transaction was not broadcasted by the recipient.
 */
export declare class ERR_DOJO_PAYMAIL_MISMATCH extends CwiError {
    constructor();
}
/**
 * The provided paymail was not in the correct format.
 */
export declare class ERR_DOJO_PAYMAIL_NOT_FORMATTED_CORRECTLY extends CwiError {
    constructor();
}
/**
 * This paymail was not found on this server.
 */
export declare class ERR_DOJO_PAYMAIL_NOT_FOUND extends CwiError {
    constructor();
}
/**
 * This Paymail handle is unavailable for registration by this server.
 */
export declare class ERR_DOJO_PAYMAIL_UNAVAILABLE extends CwiError {
    constructor();
}
/**
 * The reference you have provided is expired. The transaction was not broadcasted by the recipient.
 */
export declare class ERR_DOJO_REQUEST_EXPIRED extends CwiError {
    constructor();
}
/**
 * The signature you provided to authenticate this Paymail sender is not valid.
 */
export declare class ERR_DOJO_SENDER_SIGNATURE_CHECK extends CwiError {
    constructor();
}
/**
 * The transaction cannot be found linked with your user account.
 */
export declare class ERR_DOJO_TRANSACTION_NOT_FOUND extends CwiError {
    constructor();
}
/**
 * This transaction was rejected and was not broadcasted by the recipient. Ensure that all specified output scripts are present with the correct amounts assigned to each.
 */
export declare class ERR_DOJO_TRANSACTION_REJECTED extends CwiError {
    constructor(description?: string);
}
/**
 * No envelope for ${txid}
 */
export declare class ERR_DOJO_NO_ENVELOPE extends CwiError {
    constructor(txid: string);
}
/**
 * processPendingOuputs of outgoing transactions is not suported at this time.
 */
export declare class ERR_DOJO_PROCESS_PENDING_OUTGOING extends CwiError {
    constructor();
}
/**
 * dojo sync ${step} status expected '${expected}' but received '${actual}'
 */
export declare class ERR_DOJO_SYNC_STATUS extends CwiError {
    constructor(step: string, expected: DojoSyncStatus, actual: DojoSyncStatus);
}
/**
* refNum '${expected}' expected, '${actual}' received
*/
export declare class ERR_DOJO_SYNC_REFNUM extends CwiError {
    constructor(expected: string, actual: string);
}
/**
* missing valid update state from syncDojo
*/
export declare class ERR_DOJO_SYNC_STATE extends CwiError {
    constructor();
}
/**
* sync total '${expected ?? 0}' expected, '${actual ?? 0}' received
*/
export declare class ERR_DOJO_SYNC_TOTAL extends CwiError {
    constructor(expected: number | undefined, actual: number | undefined);
}
/**
* description || 'Dojo sync merge error.'
*/
export declare class ERR_DOJO_SYNC_MERGE extends CwiError {
    constructor(description?: string);
}
/**
* description || 'Dojo foreign key validation error.'
*/
export declare class ERR_DOJO_FOREIGN_KEY extends CwiError {
    constructor(description?: string);
}
/**
* description || 'Dojo validation error.'
*/
export declare class ERR_DOJO_VALIDATION extends CwiError {
    constructor(description?: string);
}
/**
* description || 'Dojo transaction broadcast failed.'
*/
export declare class ERR_DOJO_BROADCAST_FAILED extends CwiError {
    constructor(description?: string);
}
/**
* `Update is invalid on completed transaction txid=${asString(txid)}`
*/
export declare class ERR_DOJO_COMPLETED_TX extends CwiError {
    constructor(txid: string | Buffer);
}
/**
* `Update is invalid on proven transaction txid=${asString(txid)}`
*/
export declare class ERR_DOJO_PROVEN_TX extends CwiError {
    constructor(txid: string | Buffer);
}
//# sourceMappingURL=ERR_DOJO_errors.d.ts.map