/**
 * Errors which extend CwiError implement `name` as an alternate getter for `code`,
 * and `message` as an alternate getter for `description`.
 *
 * This supports catch handlers that might catch both
 * `Error` derived or `CwiErrorBase` derived errors.
 *
 * Derived class constructors should use the derived class name as the value for `code`,
 * and an internationalizable constant string for `description`.
 *
 * If a derived class intends to wrap another CwiError, the public property should
 * be named `cwiError` and will be recovered by `fromUnknown`.
 *
 * Optionaly, the derived class `description` can include template parameters passed in
 * to the constructor. See ERR_MISSING_PARAMETER for an example.
 *
 * To avoid derived class name colisions, packages should include a package specific
 * identifier after the 'ERR_' prefix. e.g. 'ERR_DOJO_' as the prefix for Dojo specific error
 * classes.
 */
export declare class CwiError extends Error {
    details?: Record<string, string> | undefined;
    constructor(code: string, description: string, stack?: string, details?: Record<string, string> | undefined);
    /**
     * Recovers all public fields from CwiError derived error classes and relevant Error derived errors.
     *
     * Critical client data fields are preserved across HTTP DojoExpress / DojoExpressClient encoding.
     */
    static fromUnknown(err: unknown): CwiError;
    /**
       * Error class compatible accessor for  `code`.
       */
    get code(): string;
    set code(v: string);
    /**
       * Error class compatible accessor for `description`.
       */
    get description(): string;
    set description(v: string);
    /**
       * @returns standard HTTP error status object with status property set to 'error'.
       */
    asStatus(): {
        status: string;
        code: string;
        description: string;
    };
    toJSON_old(): object;
}
//# sourceMappingURL=CwiError.d.ts.map